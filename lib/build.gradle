// Project level build file starts here

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.breadmoirai:github-release:2.5.2"
    }
}

plugins {
    id "org.sonarqube" version "3.1"
}

apply plugin: 'eclipse'
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "jacoco"
apply plugin: "com.github.breadmoirai.github-release"

version = '0.16.0'
def libName = "OpeningHoursFragment"

task updateTranslations(type: Exec) {
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', 'tx.exe', 'pull', '-a'
    } else {
        commandLine 'tx', 'pull', '-a'
    }
}
updateTranslations.group = 'translation'
updateTranslations.description = 'Update translations by executing the transifex tx utility'

apply from: 'https://raw.githubusercontent.com/simonpoole/gradle-tasks/master/eclipse-android-4-lib'
// apply from: '../../gradle-tasks/eclipse-android-3-lib'

android {
    namespace "ch.poole.openinghoursfragment"
    
    compileSdkVersion 35

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 35
        versionCode 100
        versionName "${project.version}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "${libName}")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests.all {
            jacoco { includeNoLocationClasses = true }
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
                showExceptions true
                exceptionFormat "full"
                showCauses true
                showStackTraces true
            }
            systemProperty 'robolectric.logging', 'stdout'
        }
        unitTests.includeAndroidResources = true
    }
    
    lintOptions {
        // checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    
    // seems as if recent AGP version have borked output file name generation
    libraryVariants.all { variant ->
        variant.outputs.all {
            if ("release".equals(variant.name)) {
                outputFileName = "${libName}-${project.version}.aar"
            } else {
                outputFileName = "${libName}-${project.version}-${variant.name}.aar"
            }
        }
    }
}


ext {
    adb = android.getAdbExe().toString()
    githubToken = System.getenv('GITHUB_TOKEN')
}

dependencies {
    implementation "androidx.appcompat:appcompat:1.7.0"
    implementation "androidx.appcompat:appcompat-resources:1.7.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.preference:preference:1.2.1"
    implementation "com.google.android.material:material:1.8.0"
    implementation "androidx.annotation:annotation:1.1.0"
    implementation "androidx.core:core:1.16.0"
    implementation "ch.poole:OpeningHoursParser:0.26.0"
    implementation "ch.poole.android:rangebar:0.1.6"
    implementation 'ch.poole.android:numberpickerview:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
 
    // Instrumentation tests
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test:rules:1.6.1'
    androidTestImplementation "org.hamcrest:hamcrest-library:2.2"
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'
    
    // Unit tests
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.robolectric:robolectric:4.15.1"
    testImplementation 'androidx.test.ext:junit:1.2.1'
    testImplementation 'androidx.test:rules:1.6.1'
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        group "Documentation"
        source = variant.javaCompile.source
        doFirst {
            classpath = files(variant.javaCompile.classpath.files) + files(android.bootClasspath) + files(variant.javaCompile.destinationDir)
        }
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

afterEvaluate{

    // this task will generate tasks for each test that was run in the last on device test
    // it doesn't depend on it directly as that would require waiting for all the tests to execute first
    // so the best strategy seems to simply refresh the build after the on device tests have been ran
    // tests are split up over two categories depending if they failed or not
    task generateTestTasks {
        def fileRegex = "TEST.*\\.xml"
        def fileList = new File(projectDir.getPath() +"/build/outputs/androidTest-results/connected//").listFiles().findAll { it.name ==~ /${fileRegex}/ }
        if (!fileList.empty) {
            def tests = (new XmlParser()).parse(fileList.get(0)) // assume all tests outputs are equivalent
            tests.'testcase'.each { testcase ->
                def toRun = testcase.@classname + "#" + testcase.@name
                task ("run${toRun.capitalize()}",
                dependsOn: ["installDebugAndroidTest"],
                type: Exec) {
                    if (testcase.failure.size() == 0) {
                        group = 'sucessful tests'
                    } else {
                        group = "failed tests"
                    }
                    description = "Run test " + toRun
                    // commandLine adb, 'shell', 'pm', 'list', 'instrumentation'
                    commandLine adb, 'shell', 'am', 'instrument', '-w', '-e', 'class',  toRun, "ch.poole.openinghoursfragment.test/android.support.test.runner.AndroidJUnitRunner"
                    finalizedBy "uninstallDebugAndroidTest"
                }
            }
        }
    }
    generateTestTasks.group = 'verification'
    generateTestTasks.description = 'Generate tasks for individual tests'
}

sonarqube {
    properties {
        property "sonar.java.source","1.8"
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.java.binaries", "build/intermediates/compile_library_classes_jar/debug/bundleLibCompileToJarDebug/classes.jar"
        property "sonar.coverage.jacoco.xmlReportPaths","build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        property "sonar.projectName","OpeningHoursFragment"
    }
}

ext {
    // hardwiring this is ugly but it does work
    releaseSource = file('src/main/java/ch/poole/openinghoursfragment')
    releaseJavadoc = file('build/docs/javadoc')
}

task sourcesJar(type: Jar) {
    from releaseSource
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: 'generateReleaseJavadoc') {
    archiveClassifier = 'javadoc'
    from releaseJavadoc
    //	options.encoding = 'UTF-8'
}

group "ch.poole"

task replaceVersion {
    doLast {
        ant.replaceregexp(match:'ch\\.poole\\:OpeningHoursFragment\\:([0-9\\.]+)', replace:"ch.poole:OpeningHoursFragment:${version}", flags:'g', byline:true) {
            fileset(dir: '..', includes: 'README.md')
        }
    }
}
build.dependsOn replaceVersion

def coverageSourceDirs = ['src/main/java']

// see https://github.com/gradle/gradle/issues/5184
// and https://issuetracker.google.com/issues/178015739
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Verification"

    description = "Generate Jacoco coverage reports"

    classDirectories.from = fileTree(
            dir: 'build/intermediates/javac/debug/classes/',
            excludes: ['**/R.class', '**/R$*.class', '**/*$ViewInjector*.*', '**/BuildConfig.*', '**/Manifest*.*'])

    additionalSourceDirs.from = files(coverageSourceDirs)
    sourceDirectories.from = files(coverageSourceDirs)
    executionData.from     = files([
                fileTree(
                    dir     : "$buildDir",
                    include : ['jacoco.exec', 'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec', 'spoon-output/currentDebug/coverage/merged-coverage.ec'])
                ])
    reports {
        xml.required = true
        html.required = true
    }

    sourceDirectories.from = files(coverageSourceDirs)
}

ext {
    repoUrl = 'https://github.com/simonpoole/OpeningHoursFragment.git'
    spdxId = 'MIT'
}

publishing {
    publications {
        openinghoursfragment(MavenPublication) {
            groupId 'ch.poole'
            artifactId 'OpeningHoursFragment'
            artifact sourcesJar 
            artifact javadocJar 
			artifact("$buildDir/outputs/aar/OpeningHoursFragment-${project.version}.aar")
			
			pom {
                name = artifactId
                description = 'This is an Android component for editing OSM "opening_hours" tags'    
                url = 'https://github.com/simonpoole/OpeningHoursFragment'
                scm {
                    url = repoUrl
                }
                licenses {
                    license {
                        name = spdxId
                        url = 'https://raw.githubusercontent.com/simonpoole/OpeningHoursFragment/master/LICENCE.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Simon Poole'
                    }
                }
            }
			//The publication doesn't know about our dependencies, so we have to manually add them to the pom
			// see https://stackoverflow.com/questions/24743562/gradle-not-including-dependencies-in-published-pom-xml
			pom.withXml {
    			def dependenciesNode = asNode().appendNode('dependencies')

    			//Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
    			configurations.implementation.allDependencies.each {
        		def dependencyNode = dependenciesNode.appendNode('dependency')
        			dependencyNode.appendNode('groupId', it.group)
        			dependencyNode.appendNode('artifactId', it.name)
        			dependencyNode.appendNode('version', it.version)
    			}
			}

            repositories {
                maven {
                    name = 'sonatype'
                    credentials(PasswordCredentials)
                    def releasesRepoUrl = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
                    def snapshotsRepoUrl = "https://ossrh-staging-api.central.sonatype.com/content/repositories/snapshots/"
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                }
            }
        }
    }
}

signing {
    sign publishing.publications.openinghoursfragment
}

githubRelease {
    token project.ext.githubToken == null ? "" : project.ext.githubToken  
    repo = "OpeningHoursFragment"  
    owner = "simonpoole"
    tagName = project.version
    releaseName = project.version
    targetCommitish = "master" 
    generateReleaseNotes = true 
    overwrite = true
}

afterEvaluate {
    publishOpeninghoursfragmentPublicationToSonatypeRepository.dependsOn tasks.githubRelease
}
