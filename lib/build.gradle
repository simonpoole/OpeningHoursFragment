// Project level build file starts here
plugins {
    id "com.jfrog.bintray" version "1.7.1"
    id "org.sonarqube" version "2.7"
}

apply plugin: 'eclipse'
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: "jacoco"

version = '0.6.2'
def libName = "OpeningHoursFragment"

task updateTranslations(type: Exec) {
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', 'tx.exe', 'pull', '-a'
    } else {
        commandLine 'tx', 'pull', '-a'
    }
}
updateTranslations.group = 'translation'
updateTranslations.description = 'Update translations by executing the transifex tx utility'

apply from: 'https://raw.githubusercontent.com/simonpoole/gradle-tasks/master/eclipse-android-3'
// apply from: '../../gradle-tasks/eclipse-android-3'

android {
    compileSdkVersion 25

    defaultConfig {
        minSdkVersion 12
        targetSdkVersion 25
        versionCode 100
        versionName "${project.version}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "${libName}")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    lintOptions {
        // checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

ext {
    supportLibVersion = "25.3.1"
    adb = android.getAdbExe().toString()
}

dependencies {
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    implementation "com.android.support:recyclerview-v7:$supportLibVersion"
    implementation "com.android.support:preference-v7:$supportLibVersion"
    implementation "com.android.support:design:$supportLibVersion"
    implementation "com.android.support:support-annotations:$supportLibVersion"
    implementation "com.android.support:support-compat:$supportLibVersion"
    implementation "ch.poole:OpeningHoursParser:0.16.0"
    implementation "ch.poole:rangebar:0.1.4"
    implementation 'cn.carbswang.android:NumberPickerView:1.1.1'
    implementation "com.google.code.gson:gson:2.8.5"

    // Instrumentation tests
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "com.android.support.test:rules:1.0.2"
    androidTestImplementation "org.hamcrest:hamcrest-library:1.3"
    // androidTestImplementation "com.android.support.test.espresso:espresso-core:2.2.2"    
    androidTestImplementation "com.android.support.test.uiautomator:uiautomator-v18:2.1.2"
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        group "Documentation"
        source = variant.javaCompile.source
        classpath = files(variant.javaCompile.classpath.files) + files(android.bootClasspath) + files(variant.javaCompile.destinationDir)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

afterEvaluate{

    // this task will generate tasks for each test that was run in the last on device test
    // it doesn't depend on it directly as that would require waiting for all the tests to execute first
    // so the best strategy seems to simply refresh the build after the on device tests have been ran
    // tests are split up over two categories depending if they failed or not
    task generateTestTasks {
        def fileRegex = "TEST.*\\.xml"
        def fileList = new File(projectDir.getPath() +"/build/outputs/androidTest-results/connected//").listFiles().findAll { it.name ==~ /${fileRegex}/ }
        if (!fileList.empty) {
            def tests = (new XmlParser()).parse(fileList.get(0)) // assume all tests outputs are equivalent
            tests.'testcase'.each { testcase ->
                def toRun = testcase.@classname + "#" + testcase.@name
                task ("run${toRun.capitalize()}",
                dependsOn: ["installDebugAndroidTest"],
                type: Exec) {
                    if (testcase.failure.size() == 0) {
                        group = 'sucessful tests'
                    } else {
                        group = "failed tests"
                    }
                    description = "Run test " + toRun
                    // commandLine adb, 'shell', 'pm', 'list', 'instrumentation'
                    commandLine adb, 'shell', 'am', 'instrument', '-w', '-e', 'class',  toRun, "ch.poole.openinghoursfragment.test/android.support.test.runner.AndroidJUnitRunner"
                    finalizedBy "uninstallDebugAndroidTest"
                }
            }
        }
    }
    generateTestTasks.group = 'verification'
    generateTestTasks.description = 'Generate tasks for individual tests'
}

sonarqube {
    // we've not converted to Java 8 source yet, so analyse as for 7/1.7
    properties {
        property "sonar.java.source","1.7"
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.java.binaries", "build/intermediates/javac/debug/compileDebugJavaWithJavac/classes"
        property "sonar.jacoco.reportPaths","build/jacoco/testDebugUnitTest.exec,\
            build/outputs/code-coverage/connected/8.1(AVD) - 8.1.0-coverage.ec"
    }
}

ext {
    // hardwiring this is ugly but it does work
    releaseSource = file('src/main/java/ch/poole/openinghoursfragment')
    releaseJavadoc = file('build/docs/javadoc')
}

task sourcesJar(type: Jar) {
    from releaseSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: 'generateReleaseJavadoc') {
    classifier = 'javadoc'
    from releaseJavadoc
    //	options.encoding = 'UTF-8'
}

group "ch.poole"

publishing {
    publications {
        openinghoursfragment(MavenPublication) {
            groupId 'ch.poole'
            artifactId 'OpeningHoursFragment'
            artifact sourcesJar 
            artifact javadocJar 
			artifact("$buildDir/outputs/aar/OpeningHoursFragment-release.aar")
			
			//The publication doesn't know about our dependencies, so we have to manually add them to the pom
			// see https://stackoverflow.com/questions/24743562/gradle-not-including-dependencies-in-published-pom-xml
			pom.withXml {
    			def dependenciesNode = asNode().appendNode('dependencies')

    			//Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
    			configurations.implementation.allDependencies.each {
        		def dependencyNode = dependenciesNode.appendNode('dependency')
        			dependencyNode.appendNode('groupId', it.group)
        			dependencyNode.appendNode('artifactId', it.name)
        			dependencyNode.appendNode('version', it.version)
    			}
			}
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['openinghoursfragment']
    pkg {
        repo = 'osm'
        name = "${libName}"
        licenses = ['BSD 3-Clause']
        vcsUrl = 'https://github.com/simonpoole/OpeningHoursFragment.git'
        version {
        	name = "${project.version}"
			released  = new Date()
			gpg {
				sign = true //Determines whether to GPG sign the files. The default is false
				passphrase = System.getenv('BINTRAY_PASSPHRASE')
			}
        }
    }
}
