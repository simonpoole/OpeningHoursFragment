
// Project level build file starts here
plugins {
  id "com.jfrog.bintray" version "1.7.1"
  id "org.sonarqube" version "2.6.1"
}

apply plugin: 'eclipse'
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: "jacoco"

version = '0.2.2'
def libName = "OpeningHoursFragment"

task updateTranslations(type: Exec) {
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    	commandLine 'cmd', '/c', 'tx.exe', 'pull', '-a'
	} else {
    	commandLine 'tx', 'pull', '-a'
	}
}
updateTranslations.group = 'custom'
updateTranslations.description = 'Update translations by executing the transifex tx utility'

apply from: 'https://raw.githubusercontent.com/simonpoole/gradle-tasks/master/eclipse-android'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"

    defaultConfig {
        minSdkVersion project.getMinSdkVersion()
        targetSdkVersion project.getTargetSdkVersion()
        versionCode project.getVersionCode()
        versionName "${project.version}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "${libName}")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    
    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }
    
    lintOptions {
        // checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

ext {
    supportLibVersion = "24.1.1"
}

dependencies {
    compile "com.android.support:appcompat-v7:$supportLibVersion"
    compile "com.android.support:recyclerview-v7:$supportLibVersion"
    compile "com.android.support:preference-v7:$supportLibVersion"
    compile "com.android.support:design:$supportLibVersion"
    compile "com.android.support:support-annotations:23.4.0"
    compile "ch.poole:OpeningHoursParser:0.11.0"
    compile "ch.poole:rangebar:0.1.1"
    compile 'cn.carbswang.android:NumberPickerView:1.1.1'
    
    // Unit tests
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:1.10.19"

    // Instrumentation tests
    // androidTestCompile "com.android.support:support-annotations:24.0.0"
    androidTestCompile "com.android.support:support-annotations:23.4.0"
    androidTestCompile "com.android.support.test:runner:0.5"
    androidTestCompile "com.android.support.test:rules:0.5"
    androidTestCompile "org.hamcrest:hamcrest-library:1.3"
    androidTestCompile "com.android.support.test.espresso:espresso-core:2.2.2"
        
 
    // androidTestCompile "com.android.support.test.uiautomator:uiautomator-v18:2.1.2"
}


int getMinSdkVersion() {
    def xml = getXmlFromFile("${android.sourceSets.main.manifest.srcFile}")
    return xml.'uses-sdk'.@'android:minSdkVersion'.toInteger()
}

int getTargetSdkVersion() {
    def xml = getXmlFromFile("${android.sourceSets.main.manifest.srcFile}")
    return xml.'uses-sdk'.@'android:targetSdkVersion'.toInteger()
}

int getVersionCode() {
    def xml = getXmlFromFile("${android.sourceSets.main.manifest.srcFile}")
    return xml.@'android:versionCode'.toInteger()
}

def getXmlFromFile(String xmlFilePath) {
    def xml = new XmlSlurper().parse(new File(xmlFilePath))
    if (xml == null) {
        throw new NullPointerException("Failure reading from " + xmlFilePath)
    }
    return xml;
}

android.libraryVariants.all { variant ->
  task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
    description "Generates Javadoc for $variant.name."
    group "Documentation"
    source = variant.javaCompile.source
    classpath = files(variant.javaCompile.classpath.files) + files(android.bootClasspath) + files(variant.javaCompile.destinationDir)
    options.links("http://docs.oracle.com/javase/7/docs/api/");
    options.links("http://d.android.com/reference/");
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
  }
}

ext {
	// hardwiring this is ugly but it does work
    releaseSource = file('src/main/java/ch/poole/openinghoursfragment')
    releaseJavadoc = file('build/docs/javadoc')
}

task sourcesJar(type: Jar) {
	from releaseSource
	classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: 'generateReleaseJavadoc') {
	classifier = 'javadoc'
	from releaseJavadoc
	//	options.encoding = 'UTF-8'
}

group "ch.poole"

publishing {
    publications {
        openinghoursfragment(MavenPublication) {
            groupId 'ch.poole'
            artifactId 'OpeningHoursFragment'
			artifact sourcesJar 
			artifact javadocJar 
			artifact("$buildDir/outputs/aar/OpeningHoursFragment-release.aar")
			
			//The publication doesn't know about our dependencies, so we have to manually add them to the pom
			// see https://stackoverflow.com/questions/24743562/gradle-not-including-dependencies-in-published-pom-xml
			pom.withXml {
    			def dependenciesNode = asNode().appendNode('dependencies')

    			//Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
    			configurations.compile.allDependencies.each {
        		def dependencyNode = dependenciesNode.appendNode('dependency')
        			dependencyNode.appendNode('groupId', it.group)
        			dependencyNode.appendNode('artifactId', it.name)
        			dependencyNode.appendNode('version', it.version)
    			}
			}
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['openinghoursfragment']
    pkg {
        repo = 'osm'
        name = "${libName}"
        licenses = ['BSD 3-Clause']
        vcsUrl = 'https://github.com/simonpoole/OpeningHoursFragment.git'
        version {
        	name = "${project.version}"
			released  = new Date()
			gpg {
				sign = true //Determines whether to GPG sign the files. The default is false
				passphrase = System.getenv('BINTRAY_PASSPHRASE')
			}
        }
    }
}
